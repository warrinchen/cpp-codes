{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "cppbuild",
			"label": "C/C++: g++.exe 生成活动文件",// 任务名称，与launch.json的preLaunchTask相对应
			"command": "D:\\software\\mingw64\\bin\\g++.exe",// 要使用的编译器，C++用g++
			"args": [
				"-g",// 生成和调试有关的信息
				"${file}",
				"-o",// 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
				"${fileDirname}\\${fileBasenameNoExtension}.exe",
				"-Wall", // 开启额外警告
				"-static-libgcc"//,     // 静态链接libgcc，一般都会加上
				//"-finput-charset=UTF-8",  //输入编码
				//"-fexec-charset=UTF-8", // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
				//"-std=c11", // C++最新标准为c++17，或根据自己的需要进行修改
			],// 编译的命令，其实相当于VSC帮你在终端中输了这些东西
			"options": {
				"cwd": "${fileDirname}"
			},
			"problemMatcher": [
				"$gcc" // 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错
			],
			"group": {
				"kind": "build",
				"isDefault": true // 不为true时ctrl shift B就要手动选择了
			},
			"presentation": {
				"echo": true,
				"reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
				"focus": false,     // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
				"panel": "shared"   // 不同的文件的编译信息共享一个终端面板
			},
			"detail": "编译器: D:\\software\\mingw64\\bin\\g++.exe"
		}
	]
}